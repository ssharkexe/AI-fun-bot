from modules import admin_panel as adm, chatgpt as gpt, buttons as bt, dbdata as db
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove

from main import dp, bot, storage

class UserControl(StatesGroup):
    new_user: StatesGroup = State()
    get_contact_info: StatesGroup = State()

class AdminPanel(StatesGroup):
    per_page: StatesGroup = State()
    remove_user: StatesGroup = State()

start_text = '''
üë®üèª‚Äçüíª –ü—Ä–∏–≤–µ—Ç! –Ø - —Å–±–æ—Ä–Ω–∏–∫ –≤—Å—è–∫–∏—Ö –º–æ–¥–Ω—ã—Ö –Ω–æ–≤—ã—Ö —à—Ç—É–∫ –∏–∑ –º–∏—Ä–∞ –ò–ò. –£ –º–µ–Ω—è —Ç—É—Ç –µ—Å—Ç—å:\n
‚òëÔ∏è ChatGPT –≤–µ—Ä—Å–∏–∏ 4 (–Ω–æ–≤–∏–Ω–∫–∞!) –∏ 3.5 (–Ω–µ –∑–∞–±—É–¥—å –ø–æ–∏–≥—Ä–∞—Ç—å—Å—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ä–æ–ª–µ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞!)
‚òëÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π StableDiffusion
‚òëÔ∏è –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Stable Diffusion
‚òëÔ∏è –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —á–µ—Ä–µ–∑ pexels.com '''

help_text = '''
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/picsearch - –ø–æ–∏—Å–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫
/stablediffusion - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
/gpt_model_settings - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ GPT (3/4)
/gpt_role_settings - –≤—ã–±–æ—Ä —Ä–æ–ª–∏ GPT
/settings - –±–∞–ª–∞–Ω—Å –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
/flush - —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç GPT
/buy - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å GPT'''

group_help_text = '''
–í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å ChatGPT –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–ª—ç—à–∞ "/"
–ù–∞–ø—Ä–∏–º–µ—Ä, "/–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"
–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:
/gpt_model_settings - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ GPT (3/4)
/gpt_role_settings - –≤—ã–±–æ—Ä —Ä–æ–ª–∏ GPT
/flush - —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç GPT
–û—Å—Ç–∞–ª—å–Ω–æ–µ –≤ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º'''


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command_handler(message: types.Message):
    enabled_chats, admin = db.get_all_users()
    if str(message.from_user.id) in enabled_chats:
        if message.chat.type == 'group':
            await bot.send_message(message.chat.id, text='ChatGPT –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º')
        else:
            await bot.send_message(message.chat.id, text=f'{start_text}\n{help_text}')
    else:
        state = dp.get_current().current_state(chat=message.from_user.id, user=message.from_user.id)
        await state.set_state(UserControl.new_user)
        async with state.proxy() as data:
            data['message'] = message
        keyboard=types.ReplyKeyboardMarkup(row_width = 1, resize_keyboard = True) 
        keyboard.add(types.KeyboardButton(text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact = True))
        await bot.send_message(message.from_user.id, '–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è? –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç', reply_markup = keyboard) 

# –ö–æ–º–∞–Ω–¥–∞ /help 
async def help_command_handler(message: types.Message):
    if message.chat.type == 'group':
        await message.reply(group_help_text)
    else:
        await message.reply(f'{start_text}\n{help_text}')

# # –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ FSM —Å—Ç–µ–π—Ç–∞
# async def default_text_message(message: types.Message):
#     await message.reply(f'–î–æ—Å—Ç–ø—É–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç—É—Ç /help')

# –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
async def get_new_user_contact(message: types.Message, state: FSMContext):
    state = dp.get_current().current_state(chat=message.from_user.id, user=message.from_user.id)
    enabled_chats, admin = db.get_all_users()
    data = await state.get_data()
    print(data['message'])
    await state.set_state(UserControl.get_contact_info)
    await state.update_data(user_info = message)
    print(message)
    NEW_USER_BUTTONS = await bt.new_user_buttons(message.from_user.id)
    await bot.send_message(message.from_user.id, text=f'–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –û–∂–∏–¥–∞–π—Ç–µ', reply_markup = ReplyKeyboardRemove())
    await bot.send_message(admin, text=f'–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É\nTelegram ID: {message.contact.user_id}\n–ò–º—è: {message.contact.first_name}\n–¢–∏–ø: {message.chat.type}\n–¢–µ–ª–µ—Ñ–æ–Ω: {message.contact.phone_number}', reply_markup=NEW_USER_BUTTONS)

# –û–¥–æ–±—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É
async def register_user(message: types.CallbackQuery):
    user_id = message.data.split('_')[-1]
    state = dp.get_current().current_state(chat=user_id, user=user_id)
    data = await state.get_data()
    db.register_user(data['user_info'])
    await message.message.edit_text(text=f'–î–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data["user_info"].chat.id} –≤ –±–∞–∑—É')
    await bot.send_message(user_id, text=f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')
    await state.finish()

# –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def deny_user(message: types.CallbackQuery):
    user_id = message.data.split('_')[-1]
    state = dp.get_current().current_state(chat=user_id, user=user_id)
    await bot.send_message(message.from_user.id, text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')
    await bot.send_message(user_id, text=f'–í–∞–º –æ—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ')
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /settings
async def admin_panel(message: types.Message):
    enabled_chats, admin = db.get_all_users()
    if str(message.from_user.id) == admin:
        users = db.get_saved_users()
        start_text, MNG_BUTTONS, per_page_users = await adm.manage_users(users, 1)
        msg = await bot.send_message(message.from_user.id, text=start_text, reply_markup=MNG_BUTTONS)
        await AdminPanel.per_page.set()
        state = dp.get_current().current_state()
        async with state.proxy() as data:
            data['msg'] = msg
            data['users'] = users
            data['per_page_users'] = per_page_users
    elif str(message.from_user.id) in enabled_chats:
        await bot.send_message(message.from_user.id, text=await adm.get_current_user_details(message.from_user.id)) 
    else:
        await bot.send_message(message.from_user.id, text=f'–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
        await bot.send_message(admin, text=f'‚õîÔ∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ø–∞—Å—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\nTelegram ID: {message.from_user.id}\n–ò–º—è: {message.chat.first_name} / {message.chat.title}\n–¢–∏–ø: {message.chat.type}')

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def page_switcher_adm(message: types.CallbackQuery):
    state = dp.get_current().current_state()
    data = await state.get_data()
    # msg = data['msg']
    users = data['users']
    per_page_users = data['per_page_users']
    # await msg.delete()
    new_page = int(message.data.split('_')[-1])
    start_text, MNG_BUTTONS, per_page_users = await adm.manage_users(users, new_page)
    # msg = await bot.send_message(message.message.chat.id, text=start_text, reply_markup=MNG_BUTTONS)
    await message.message.edit_text(text=start_text, reply_markup=MNG_BUTTONS)
    state = dp.get_current().current_state()
    async with state.proxy() as data:
        # data['msg'] = msg
        data['page'] = new_page
        data['per_page_users'] = per_page_users

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def remove_user_menu(message: types.CallbackQuery):
    state = dp.get_current().current_state()
    data = await state.get_data()
    users = data['users']
    per_page_users = data['per_page_users']
    # await msg.delete()
    RMV_BUTTONS = await bt.remove_users_buttons(per_page_users)
    # msg2 = await bot.send_message(message.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å', reply_markup=RMV_BUTTONS)
    await message.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å', reply_markup=RMV_BUTTONS)
    await AdminPanel.remove_user.set()
    # async with state.proxy() as data:
    #     data['msg2'] = msg2

# –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def remove_user_from_db(message: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # msg2 = data['msg2']
    user_id = int(message.data.split('_')[-1])
    # await msg2.delete()
    db.delete_user(user_id)
    # await bot.send_message(message.from_user.id, f'–£–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: {user_id}')
    await message.message.edit_text(text=f'–£–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: {user_id}')
    await state.finish()

# –í—ã—Ö–æ–¥ –∏–∑ FSM
async def exit_fsm(message: types.CallbackQuery):
    await message.message.delete()
    state = dp.get_current().current_state()
    # data = await state.get_data()
    await state.set_state(state=None)

# –í—ã–¥–∞—á–∞ –∞–π–¥–∏—à–Ω–∏–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞, –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É
async def get_contact_id(message: types.Message):
    print(message)
    await bot.send_message(message.from_user.id, text=f'–ò–º—è: {message.contact.first_name} {message.contact.last_name}\nTelegram ID: {message.contact.user_id}\n–¢–µ–ª–µ—Ñ–æ–Ω: {message.contact.phone_number}')
