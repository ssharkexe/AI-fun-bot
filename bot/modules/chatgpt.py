from modules import dbdata as db
import os
import openai, httpx
from openai import OpenAI, OpenAIError, APIConnectionError, BadRequestError, RateLimitError, PermissionDeniedError, AuthenticationError

proxy_host = os.environ.get("PROXY_HOST")
proxy_port = os.environ.get("PROXY_PORT")
proxy_user = os.environ.get("PROXY_USER")
proxy_pass = os.environ.get("PROXY_PASS")
proxy = ''
if '' not in [proxy_host, proxy_port, proxy_user, proxy_pass]:
    proxy = f"http://{proxy_user}:{proxy_pass}@{proxy_host}:{proxy_port}"

if proxy:
    client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"), http_client=httpx.Client(proxies=proxy))
else:
    client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"), http_client=httpx.Client())

# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å–ª–æ–≤–∞—Ä—è —Å—Ç–∏–ª–µ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
# contexts = {}

roles = {
    '–ò–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω':{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω"},
    '–ò—Ç–∞–ª—å—è–Ω–µ—Ü':{"role": "system", "content": "–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—Å—Ç–∞–≤–ª—è–π –∏—Å–ø–∞–Ω—Å–∫–∏–µ —Å–ª–æ–≤–∞ –±—É–¥—Ç–æ —Ç—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–µ—Ü"},
    '–ì–æ–ø–Ω–∏–∫':{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –≥–æ–ø–Ω–∏–∫"},
    '–¢—Ä—É–¥–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫':{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ç—Ä—É–¥–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫"},
    '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç':{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"},
    '–û–±–∏–∂–µ–Ω–Ω—ã–π –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–π':{"role": "system", "content": "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–±–∏–∂–µ–Ω–Ω—ã–π –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–π"}
}

gpt_models = {
    3:'gpt-4o-mini',
    4:'gpt-4-turbo'
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π    
async def handle_message(telegram_id: int, text: str, contexts: dict, model: int = 3):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = text.split('/')[-1]
    user_input = {"role": "user", "content": text}
    if telegram_id in contexts.keys():
        contexts[telegram_id].append(user_input)
    else:
        contexts[telegram_id] = [user_input]
    print(f'–î–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:')
    print(contexts)
    print(f'–∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –º–æ–¥–µ–ª—å - {gpt_models[model]}')
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI API
    try:
        response = client.chat.completions.create(
            model=f'{gpt_models[model]}', 
            # max_tokens=4000,
            messages=contexts[telegram_id])
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        gpt_answer: str = response.choices[0].message.content
        gpt_answer_shrinked: str = response.choices[0].message.content
        if len(gpt_answer) > 400:
            gpt_answer_shrinked = response.choices[0].message.content[0:400]
        contexts[telegram_id].append({"role": "assistant", "content": gpt_answer_shrinked})
        print(f'–ü–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:')
        print(contexts[telegram_id])
        print(f'–ó–∞–ø—Ä–æ—Å: {response.usage.prompt_tokens} —Ç., –æ—Ç–≤–µ—Ç: {response.usage.completion_tokens} —Ç.')
        db.save_gpt_chat_credits(telegram_id, model, response.usage.prompt_tokens, response.usage.completion_tokens)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        return contexts, gpt_answer
    except APIConnectionError:
        return contexts, '–•—å—é—Å—Ç–æ–Ω, —É –Ω–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–≤—è–∑—å—é üë®üèª‚Äçüíª. –ù–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑'
    except PermissionDeniedError:
        return contexts, '–í–∞—à —Ä–µ–≥–∏–æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å proxy'
    except RateLimitError:
        return contexts, '–ò–ò –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ'
    except BadRequestError:
        contexts[telegram_id] = []
        return contexts, '–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç 4000 —Ç–æ–∫–µ–Ω–æ–≤! –ö—ç—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–±—Ä–æ—à–µ–Ω'
    except AuthenticationError:
        contexts[telegram_id] = []
        return contexts, '–û–±–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω OpenAI'
    
    
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞   
async def assistant_role_setting(telegram_id: int, gpt_role_index: int, contexts: dict):
    role_dict = list(roles.values())[gpt_role_index]
    role_name = list(roles.keys())[gpt_role_index]
    # contexts[telegram_id].append(role_dict)
    if telegram_id in contexts.keys():
        contexts[telegram_id].append(role_dict)
    else:
        contexts[telegram_id] = [role_dict]
    return contexts, f'–û–∫–µ–π, –Ω–∞—Å—Ç—Ä–æ–∏–ª! {role_name}'
    
# –ü–æ–ª—É—á–∞–µ–º –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–æ–ª–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∏ –º–æ–¥–µ–ª–∏ GPT
async def get_gpt_params():
    pass


